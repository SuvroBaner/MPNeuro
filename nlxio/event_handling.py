# -*- coding: utf-8 -*-
"""
Created on Fri May 23 14:08:25 2014

@author: palmiteradmin
"""

# my attempt at reading *.nev event files
# adapted from neurapy/neuralynx/lynxio.py by kghose

import pylab
import numpy as np
import csv

# each event consists of the following information
nev_packet = pylab.dtype([
    ('nstx', 'h'), # not used
    ('npkt_id', 'h'), # packetid
    ('npkt_data_size', 'h'), #packetsize
    ('timestamp', np.uint64), #timestamp in microseconds
    ('eventid', 'h'),
    ('nttl', 'h'),
    ('ncrc', 'h'),
    ('ndummy1', 'h'),
    ('ndummy2', 'h'),
    ('dnExtra', '8i'),
    ('eventstring', '128c') # name of event
  ])

# loads event information from binary neuralynx *.nev file generated by cheetah
def load_nev(filename = 'Events.nev'):
    nev_file = open(filename)
    # skip the header
    header = nev_file.read(16*1024 -12) # this is 16kB header, minus 12 bytes (16*1024 -12); no idea why minus twelve bytes
    
    # read in start event and get start time 
    start_event = pylab.fromfile(nev_file, dtype=nev_packet, count=1)
    start_time = start_event['timestamp'] /  1e6 # time in seconds (divided from microseconds)
    
    
    all_events = pylab.fromfile(nev_file, dtype=nev_packet, count=-1) # read in all packet info
    pulse_starts = np.array(all_events['timestamp'][::2]) / 1e6 # alternate timestamps for TTL on and off
    pulse_starts2 = pulse_starts - start_time # subtract start time
    
    # repeat above for end of light pulse
    pulse_ends = np.array(all_events['timestamp'][1::2]) / 1e6
    pulse_ends2 = pulse_ends - start_time
    
    return pulse_starts2, pulse_ends2
    
# take timestamps (in seconds), and saves them to *.abc.evt file readable by neuroscope
def save_to_evt(timestamps, event_name = 'stim', filename = 'events.abc.evt'):
    # create "csv" file for opening
    evt_file = open(filename, 'wb')
    csv_writer = csv.writer(evt_file, delimiter = ' ')
    # write the events to the file; the format is simply time and label, whitespace separated
    for event in timestamps:
        csv_writer.writerow([(event * 1000).astype('str'), event_name]) # *1000 for conversion to ms